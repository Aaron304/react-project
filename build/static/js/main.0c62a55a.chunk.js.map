{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","address","phoneNumber","email","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","newContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c62a55a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\n  return (\n    <tr>\n      <td>{contact.fullName}</td>\n      <td>{contact.address}</td>\n      <td>{contact.phoneNumber}</td>\n      <td>{contact.email}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from \"react\";\n\nconst EditableRow = ({\n  editFormData,\n  handleEditFormChange,\n  handleCancelClick,\n}) => {\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          name=\"fullName\"\n          value={editFormData.fullName}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter an address...\"\n          name=\"address\"\n          value={editFormData.address}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a phone number...\"\n          name=\"phoneNumber\"\n          value={editFormData.phoneNumber}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          name=\"email\"\n          value={editFormData.email}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <button type=\"submit\">Save</button>\n        <button type=\"button\" onClick={handleCancelClick}>\n          Cancel\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;\n","import React, { useState, Fragment } from \"react\";\n\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n     \n      fullName: addFormData.fullName,\n      address: addFormData.address,\n      phoneNumber: addFormData.phoneNumber,\n      email: addFormData.email,\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n      address: editFormData.address,\n      phoneNumber: editFormData.phoneNumber,\n      email: editFormData.email,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      address: contact.address,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Address</th>\n              <th>Phone Number</th>\n              <th>Email</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map((contact) => (\n              <Fragment>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n\n      <h2>Add a Contact</h2>\n      <form onSubmit={handleAddFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"address\"\n          required=\"required\"\n          placeholder=\"Enter an addres...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"phoneNumber\"\n          required=\"required\"\n          placeholder=\"Enter a phone number...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          onChange={handleAddFormChange}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}